#!/usr/bin/env python

import os
import sys

if os.getenv('ROOTPY_GRIDMODE') is None:

    print "Sourcing grid-setup.sh..."
    import subprocess

    command = ['bash', '-c', 'source grid-setup.sh worker && env']

    proc = subprocess.Popen(command, stdout=subprocess.PIPE)

    for line in proc.stdout:
        (key, _, value) = line.partition("=")
        os.environ[key] = value

    proc.communicate()
    print "Re-executing self..."
    subprocess.call('`which python` %s' % ' '.join(sys.argv), shell=True)
    sys.exit(0)

try:
    from argparse import ArgumentParser
except:
    from rootpy.backports.argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('-o', '--output', required=True)
parser.add_argument('inputs', nargs='+')
args = parser.parse_args()

from subprocess import call

if args.output.endswith('.root'):
    # standard ROOT merge
    call('hadd %s %s' % (args.output, ' '.join(args.inputs)), shell=True)
elif args.output.endswith('.p'):
    # merge cutflow pickles
    try:
        import cPickle as pickle
    except ImportError:
        import pickle
    from rootpy.tree.filtering import Filter, FilterList
    event_filter_lists = []
    object_filter_lists = []
    for input in args.inputs:
        with open(input) as p:
            d = pickle.load(p)
            event_filter_lists.append(d['event'])
            object_filter_lists.append(d['object'])
    event_filter_list = reduce(FilterList.merge, event_filter_lists)
    object_filter_list = reduce(FilterList.merge, object_filter_lists)
    with open(args.output, 'w') as output:
        pickle.dump({'event': event_filter_list,
                     'object': object_filter_list}, output)
else:
    sys.exit("unsupported file type")
