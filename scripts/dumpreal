#!/usr/bin/env python

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-p", "--path",
                  action="store", type="string", dest="path", default=None,
                  help="path to AODs")
parser.add_option("-i", "--input",
                  action="store", type="string", dest="input", default=None,
                  help="AOD file")
parser.add_option("-l", "--list",
                  action="store", type="string", dest="list", default=None,
                  help="Text file containing list of AOD files")
parser.add_option("-o", "--output",
                  action="store", type="string", dest="output", default="output",
                  help="name of output file excluding .root extension")
parser.add_option("--name",
                  action="store", type="string", dest="name", default=None,
                  help="name prefix of the tree(s) that will be stored in the ROOT file")
parser.add_option("-f", "--format",
                  action="store", type="string", dest="format", default="AOD",
                  help="file format of sample: AOD or ESD")
parser.add_option("--lumiblocks",
                  action="store", type="string", dest="lbRanges", default=None,
                  help="good lumiblock ranges: a-b,c-d,...")
parser.add_option("-n", "--numEvent",
                  action="store", type="int", dest="numEvents", default=-1,
                  help="type of sample: train or test")
parser.add_option("-v", action="store_true", dest="verbose", default=False)

(options, args) = parser.parse_args()

import sys
import glob
import ROOT
from TauMVA.EventStream import EventStream
from TauMVA.Sample import RealSample

def error(message):
    
    print "ERROR: "+message+" %s" % sys.argv[1:]
    sys.exit(1)
    
def isGoodLumiBlock(lb,ranges):
    
    for range in ranges:
        if lb >= range[0] and lb <= range[1]:
            return True
    return False

def main():
    
    if options.format.upper() not in ("AOD","ESD"):
        error("Unknown data file format")
    
    if not options.lbRanges:
        error("Invalid good lumi block ranges")
    
    lbRanges = []
    ranges = options.lbRanges.split(",")
    for range in ranges:
        tuple = range.split("-")
        lbRanges.append((int(tuple[0]),int(tuple[1])))
    
    if args:
        if len(args) > 1:
            filelist = args
        else:
            filelist = args[0].split(',')
    else:
        if options.path == None and options.input == None and options.list == None:
            error("No input specified.")
        if options.path != None:
            filelist = glob.glob(options.path+'*'+options.format+'*')
        elif options.input != None:
            filelist = [options.input]
        elif options.list != None:
            file = open(list,'r')
            if file == None:
                error("Could not open file %s"%list)
            templist = file.readlines()
            file.close()
            filelist = []
            for line in templist:
                filelist.append(line.strip().strip(',').strip('\''))
    
    if len(filelist) == 0:
        error("No files found!")
    
    outputFile = ROOT.TFile.Open(options.output+".root","recreate")
    if options.name == None:
        options.name = options.output
    sample = RealSample(options.name,outputFile)
    
    containers = {"ByteStreamEventInfo":"EventInfo",
                  "TauRecContainer":"RecoJets"}
                  #"TauRecDetailsContainer":"TauRecDetails"}
    
    eventStream = EventStream(filelist,containers,options.numEvents)
    event = eventStream.read()
    while event != None:
        if options.verbose: print "\n<<<=== Run %d === LumiBlock %d === Event %d ===>>>"%(event.runNumber,event.lumiBlock,event.number)
        if isGoodLumiBlock(event.lumiBlock,lbRanges):
            sample.fill(event,options.verbose)
        event = eventStream.read()
    sample.finalize()
    outputFile.Close()
    print "Done."

if __name__ == "__main__": main()
