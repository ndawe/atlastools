#!/usr/bin/env python

import sys, os
from optparse import OptionParser

parser = OptionParser()
parser.add_option("--release", action="store", type="str", dest="release",
                  help="ATLAS software release", default="16")
parser.add_option("--size", action="store", type="str", dest="size",
                  help="use large or small D3PDs", default="large")
(options, args) = parser.parse_args()

import ROOT
from rootpy.common import getTrees

if len(args)<2:
    sys.exit('too few arguments')

if not os.environ.has_key('DATAROOT'):
    print 'Warning: $DATAROOT not defined!'
    dataroot = None
dataroot = os.environ['DATAROOT']

outfile = args[0]
infiles = args[1:]

if os.path.exists(outfile):
    sys.exit("File %s already exists. Please delete it if desired and rerun."%outfile)

options.release = "rel%s"% options.release

out = ROOT.TFile.Open(outfile,'recreate')
if dataroot:
    for metafile in ['variables.yml','datasets.yml','trees.yml']:
        globalxml = os.path.join(dataroot,metafile)
        if os.path.isfile(globalxml):
            print "embedding %s..."%globalxml
            xml = open(globalxml,'r')
            content = "\n".join(xml.readlines())
            xml.close()
            named = ROOT.TNamed(metafile,content)
            named.Write()

def lev(a, b):
    if not a: return len(b)
    if not b: return len(a)
    return min(lev(a[1:], b[1:])+(a[0] != b[0]), \
        lev(a[1:], b)+1, lev(a, b[1:])+1)

for infile in infiles:
    out.cd()
    treename = '.'.join(infile.split('.')[:-1])
    f = ROOT.TFile.Open(infile)
    trees = getTrees(f)
    out.mkdir(treename).cd()
    if dataroot:
        globalxml = os.path.join(dataroot,treename,options.release,options.size,'meta.yml')
        while not os.path.isfile(globalxml):
            print "cannot find %s in %s"%(treename,dataroot)
            print "please enter the original dataset name"
            print "options are:"
            options = []
            for dir in os.listdir(dataroot):
                if os.path.isfile(os.path.join(dataroot,dir,options.release,options.size,'meta.yml')):
                    options += dir
                    print dir
            origtreename = max(lev())
            origtreename = raw_input('>>> ')
            if not origtreename:
                globalxml = None
                break
            globalxml = os.path.join(dataroot,origtreename,options.release,options.size,'meta.yml')
        if globalxml:
            print "embedding %s..."%globalxml
            xml = open(globalxml,'r')
            content = "\n".join(xml.readlines())
            xml.close()
            named = ROOT.TNamed('meta.yml',content)
            named.Write()
    for tree in trees:
        print "copying %s:%s..."%(infile,tree.GetName())
        newTree = tree.CloneTree(-1,'fast')
        newTree.Write()
    f.Close()
out.Close()
