#!/usr/bin/env python

import sys
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-d","--data", action="store", type="str", dest="data",
                  help="data sample name", default="data")
parser.add_option("-m","--mc", action="store", type="str", dest="mc",
                  help="Monte Carlo sample name", default=None)
parser.add_option("-g","--grl", action="store", type="str", dest="grl",
                  help="good runs list", default=None)
parser.add_option('-p',"--periods", action="store", type="str", dest="periods",
                  help="data periods separated by commas or all period by default if not specified", default=None)
parser.add_option('-r',"--runs", action="store", type="str", dest="runs",
                  help="data runs separated by commas (must not also specify periods)", default=None)
parser.add_option('-s',"--selection", action="store", type="str", dest="selection",
                  help="tree selection (cut)", default=None)
options, args = parser.parse_args()

if options.mc is None:
    sys.exit("you must specify a Monte Carlo sample name")

from atlastools import datasets
from atlastools.dataquality import GRL
from rootpy.cut import Cut
from rootpy.plotting import Hist
from ROOT import TChain, gROOT, TFormula
gROOT.SetBatch(True)

#TFormula.SetMaxima(10000,1000,10000)

datasample = datasets.get_sample(options.data, periods = options.periods, runs = options.runs)
mcsample = datasets.get_sample(options.mc)

if not datasample:
    print "FATAL: sample %s does not exist!"% options.data
    sys.exit(1)
if not mcsample:
    print "FATAL: sample %s does not exist!"% options.mc
    sys.exit(1)

if options.selection:
    cut = Cut(options.selection)
else:
    cut = Cut()

datachain = TChain(datasample.treename)
print "using %i files for sample %s"% (len(datasample.files), options.data)
for file in datasample.files:
    datachain.Add(file)
mcchain = TChain(mcsample.treename)
print "using %i files for sample %s"% (len(mcsample.files), options.mc)
for file in mcsample.files:
    mcchain.Add(file)

_max = 11
bkg = Hist(_max-1,1,_max)
sig = bkg.Clone()

if options.grl:
    grl = GRL(options.grl)
    for entry in xrange(datachain.GetEntries()):
        datachain.GetEntry(entry)
        if (datachain.RunNumber, datachain.lbn) in grl:
            bkg.Fill(datachain.evt_calcVars_numGoodVertices)
else:
    datachain.Draw("evt_calcVars_numGoodVertices>>+%s"% bkg.GetName(), cut)

mcchain.Draw("evt_calcVars_numGoodVertices>>+%s"% sig.GetName(), cut)

bkg /= bkg.Integral()
sig /= sig.Integral()

factors = []
cut = Cut()
for bin,(bval,sval) in enumerate(zip(bkg,sig)):
    if sval == 0:
        sval = bval
    factor = bval / sval
    print "nvxp: %i, factor: %f"% (bin+1, factor)
    cut += "%f*(evt_calcVars_numGoodVertices==%i)"% (factor, bin+1)
cut += "1.*(evt_calcVars_numGoodVertices>=%i)"% (len(bkg)+1)
print cut
